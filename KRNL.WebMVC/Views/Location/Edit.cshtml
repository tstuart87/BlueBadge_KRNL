@model KRNL.Models.LocationEdit

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div>
            <h2>
                @if (Model.Latitude != 0 && Model.Longitude != 0)
                {
                    <a href=@Model.MapLink target="_blank"><img class="locDirectionsPhoto" src="/img/ilocation.png" /> @Html.DisplayFor(model => model.LocationName), @Html.DisplayFor(model => model.State)</a>
                }
                else
                {
                    <h2>
                        @Html.DisplayFor(model => model.LocationName), @Html.DisplayFor(model => model.State)
                    </h2>
                }
            </h2>
        </div>

        @if (Model.DocString != null)
        {
            <div class="toggleButton">
                <a href=@Url.Content(Model.DocString)><input type="button" value="Field Map" class="searchButton mapButton" /></a>
            </div>
        }

        @if (Model.CooperatorId != null)
        {
            <div>
                <div class="messageLabel">Cooperator:</div>
                @Html.DisplayFor(model => model.FullName) <br />
                @Html.ActionLink("VIEW", "Edit", "Cooperator", new { id = Model.CooperatorId }, null) |
                @Html.ActionLink("CHANGE", "EditCoop", new { id = Model.LocationId }, null)
            </div>
        }

        @if (Model.CooperatorId == null)
        {
            <div>
                @Html.ActionLink("Assign Cooperator", "EditCoop", new { id = Model.LocationId })
            </div>
        }

        @if (Model.IsPlanted == KRNL.Data.stake.Yes || Model.IsHarvested == KRNL.Data.stake.Yes)
        {
            <br />
            <table>
                <tr>
                    <td>
                        @if (Model.IsPlanted == KRNL.Data.stake.Yes)
                        {
                            <div class="messageLabel">Planted:</div>
                            @Html.DisplayFor(model => model.DatePlanted)
                        }
                    </td>

                    <td class="tdDates">
                        @if (Model.IsHarvested == KRNL.Data.stake.Yes)
                        {
                            <div class="messageLabel">Harvested:</div>
                            @Html.DisplayFor(model => model.DateHarvested)
                        }
                    </td>

                    <td class="tdDates">
                        @if (Model.Rating != KRNL.Data.rating.NoRating)
                        {
                            <div class="messageLabel">Last Plot Rating:</div>
                            switch (Model.Rating)
                            {
                                case KRNL.Data.rating.Excellent:
                                    <img class="ratingIcon" src="/img/rexcellent.png" alt="KRNL">
                                    break;
                                case KRNL.Data.rating.AboveAverage:
                                    <img class="ratingIcon" src="/img/raboveaverage.png" alt="KRNL">
                                    break;
                                case KRNL.Data.rating.Average:
                                    <img class="ratingIcon" src="/img/raverage.png" alt="KRNL">
                                    break;
                                case KRNL.Data.rating.BelowAverage:
                                    <img class="ratingIcon" src="/img/rbelowaverage.png" alt="KRNL">
                                    break;
                                case KRNL.Data.rating.Poor:
                                    <img class="ratingIcon" src="/img/rpoor.png" alt="KRNL">
                                    break;
                                default:
                                    break;
                            }
                        }
                    </td>
                </tr>
            </table>
        }

        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div>
            @Html.HiddenFor(model => model.LocationId, new { id = "locId" })
        </div>
        @Html.HiddenFor(model => model.CooperatorId)

        @*<div class="form-group">
                @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LocationId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
                </div>
            </div>*@


        <div class="form-group">
            @Html.LabelFor(model => model.LocationName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LocationName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LocationName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 enumDropDown">
                @Html.EnumDropDownListFor(model => model.State, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LocationCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LocationCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LocationCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.IsStaked, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsStaked)
                        @Html.ValidationMessageFor(model => model.IsStaked, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.IsStaked, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 enumDropDown">
                    @Html.EnumDropDownListFor(model => model.IsStaked, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IsStaked, "", new { @class = "text-danger" })
                </div>
            </div>*@
        @Html.HiddenFor(model => model.IsStaked)
        <div class="form-group">
            @Html.LabelFor(model => model.IsHarvested, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 enumDropDown">
                @Html.EnumDropDownListFor(model => model.IsHarvested, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsHarvested, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CRM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 enumDropDown">
                @Html.EnumDropDownListFor(model => model.CRM, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CRM, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control tagCreate" } })
                @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<br />
<hr />
<br />

@if (Model.Documents != null && Model.Documents.Count() > 0)
{
    <table class="table message">
        <tr class="messageHeader">
            <th class="messageHeader messageHeaderTopLeft">

            </th>
            <th>

            </th>
            <th>

            </th>
            <th>

            </th>
            <th class="messageHeaderTopRight">Uploaded Documents</th>
        </tr>

        @foreach (var item in Model.Documents)
        {
            <tr class="spacer">
                <td class="spacer" colspan="5"></td>
            </tr>
            <tbody class="comment">
                <tr tr class="comment">
                    <td class="messageLeftLocationCoop">
                        @Html.HiddenFor(modelItem => item.DocumentId)
                        <div class="messageLabel">LocID:</div>
                        @Html.ActionLink(item.LocationCode.ToUpper(), "Edit", "Location", new { id = item.LocationId }, null)
                    </td>
                    <td>
                        <div class="messageLabel">Document:</div>
                        <div class="smallerFont">
                            @Html.DisplayFor(modelItem => item.DocName)
                        </div>
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td class="messageRightLocationCoop locStatusDots openDocButton">
                        @if (item.DocType == KRNL.Data.docType.Map)
                        {
                            <img class="locStatusDots" src="/img/imap.png" alt="KRNL">
                            <a href=@Url.Content(item.DocString)><input type="button" value=" Open " class="openDocButton" /></a>
                        }
                        @if (item.DocType == KRNL.Data.docType.FieldBook)
                        {
                            <img class="locStatusDots" src="/img/inotes.png" alt="KRNL">
                            <a href=@Url.Content(item.DocString)><input type="button" value=" Open " class="openDocButton" /></a>
                        }
                        @*@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
                    </td>
                </tr>
            </tbody>
        }

    </table>
}

<br />
<hr />
<br />

@if (Model.Messages != null && Model.Messages.Count() > 0)

{
    <table class="table message">
        <tr class="messageHeader">
            <th width=16% class="messageHeaderTopLeft">
                @*@Html.DisplayNameFor(model => model.LocationCode)*@
            </th>
            <th width=28%>
                @*@Html.DisplayNameFor(model => model.DateCreated)*@
            </th>
            <th width=28%>
                @*@Html.DisplayNameFor(model => model.PredictedGrowthStage)*@
            </th>
            <th width=28% class="messageHeaderTopRight">
                Job Log
                @*@Html.DisplayNameFor(model => model.HumanGrowthStage)*@
            </th>
        </tr>

        @foreach (var item in Model.Messages)
        {
            <tr class="spacer">
                <td class="spacer" colspan="4"></td>
            </tr>
            <tbody class="comment">
                <tr class="messageTop">
                    <td class="message messageTopLeft">
                        <div class="messageLabel">Location:</div>
                        @Html.ActionLink(item.LocationCode.ToUpper(), "Edit", "Location", new { id = item.LocationId }, null)
                    </td>
                    <td class="message">
                        <div class="messageLabel">Date:</div>
                        @Html.DisplayFor(modelItem => item.DateCreated)
                    </td>
                    <td class="message ">
                        <div class="messageLabel">Predicted:</div>
                        @Html.DisplayFor(modelItem => item.PredictedGrowthStage)
                    </td>
                    <td class="message messageTopRight ">
                        <div class="messageLabel">Actual:</div>
                        @Html.DisplayFor(model => item.HumanGrowthStage)
                    </td>
                </tr>
                <tr class="messageBottom">
                    <td class="messageBottomLeft" colspan="2">
                        <p class="comment">
                            @Html.DisplayFor(modelItem => item.Comment)
                        </p>
                        @Html.DisplayFor(modelItem => item.FullName)
                        <br />
                        @switch (item.Rating)
                        {
                            case KRNL.Data.rating.Excellent:
                                <img class="ratingIcon" src="/img/rexcellent.png" alt="KRNL">
                                break;
                            case KRNL.Data.rating.AboveAverage:
                                <img class="ratingIcon" src="/img/raboveaverage.png" alt="KRNL">
                                break;
                            case KRNL.Data.rating.Average:
                                <img class="ratingIcon" src="/img/raverage.png" alt="KRNL">
                                break;
                            case KRNL.Data.rating.BelowAverage:
                                <img class="ratingIcon" src="/img/rbelowaverage.png" alt="KRNL">
                                break;
                            case KRNL.Data.rating.Poor:
                                <img class="ratingIcon" src="/img/rpoor.png" alt="KRNL">
                                break;
                            default:
                                break;
                        }
                    </td>
                    <td class="messageBottomRight alignRight" colspan="2">
                        @switch (item.JobOne)
                        {
                            case KRNL.Data.job.Cultivating:
                                <img class="messageIcon" src="/img/iplow.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.DroneFlight:
                                <img class="messageIcon" src="/img/idrone.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Harvesting:
                                <img class="messageIcon" src="/img/icombine.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.HerbicideSpraying:
                                <img class="messageIcon" src="/img/iherbicide.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.InsecticideSpraying:
                                <img class="messageIcon" src="/img/iinsecticide.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.NitrogenApplication:
                                <img class="messageIcon" src="/img/initrogen.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Notes:
                                <img class="messageIcon" src="/img/inotes.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.PlantEarHeights:
                                <img class="messageIcon" src="/img/ipande.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Planting:
                                <img class="messageIcon" src="/img/iplanter.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Rowbanding:
                                <img class="messageIcon" src="/img/iband.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Staking:
                                <img class="messageIcon" src="/img/istake.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.StandCounts:
                                <img class="messageIcon" src="/img/istandcounts.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.WeedManagement:
                                <img class="messageIcon" src="/img/ihoe.png" alt="KRNL">
                                break;
                            default:
                                break;
                        }

                        @switch (item.JobTwo)
                        {
                            case KRNL.Data.job.Cultivating:
                                <img class="messageIcon" src="/img/iplow.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.DroneFlight:
                                <img class="messageIcon" src="/img/idrone.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Harvesting:
                                <img class="messageIcon" src="/img/icombine.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.HerbicideSpraying:
                                <img class="messageIcon" src="/img/iherbicide.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.InsecticideSpraying:
                                <img class="messageIcon" src="/img/iinsecticide.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.NitrogenApplication:
                                <img class="messageIcon" src="/img/initrogen.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Notes:
                                <img class="messageIcon" src="/img/inotes.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.PlantEarHeights:
                                <img class="messageIcon" src="/img/ipande.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Planting:
                                <img class="messageIcon" src="/img/iplanter.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Rowbanding:
                                <img class="messageIcon" src="/img/iband.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Staking:
                                <img class="messageIcon" src="/img/istake.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.StandCounts:
                                <img class="messageIcon" src="/img/istandcounts.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.WeedManagement:
                                <img class="messageIcon" src="/img/ihoe.png" alt="KRNL">
                                break;
                            default:
                                break;
                        }

                        @switch (item.JobThree)
                        {
                            case KRNL.Data.job.Cultivating:
                                <img class="messageIcon" src="/img/iplow.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.DroneFlight:
                                <img class="messageIcon" src="/img/idrone.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Harvesting:
                                <img class="messageIcon" src="/img/icombine.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.HerbicideSpraying:
                                <img class="messageIcon" src="/img/iherbicide.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.InsecticideSpraying:
                                <img class="messageIcon" src="/img/iinsecticide.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.NitrogenApplication:
                                <img class="messageIcon" src="/img/initrogen.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Notes:
                                <img class="messageIcon" src="/img/inotes.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.PlantEarHeights:
                                <img class="messageIcon" src="/img/ipande.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Planting:
                                <img class="messageIcon" src="/img/iplanter.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Rowbanding:
                                <img class="messageIcon" src="/img/iband.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.Staking:
                                <img class="messageIcon" src="/img/istake.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.StandCounts:
                                <img class="messageIcon" src="/img/istandcounts.png" alt="KRNL">
                                break;
                            case KRNL.Data.job.WeedManagement:
                                <img class="messageIcon" src="/img/ihoe.png" alt="KRNL">
                                break;
                            default:
                                break;
                        }
                    </td>
                </tr>
            </tbody>
        }
    </table>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
     $(document).ready(function () {
         $("#OpenMap").click(function () {
             var data = JSON.stringify({
                 'locId': locId,
                 'IsPrimary':true
             });
             $.ajax({
                 type: "POST",
                 url: '@Url.Action("OpenMap", "Location")',
                 data: data,
                 contentType: 'application/json'
             });
             window.open('/Location/OpenMap', "_blank")
        });
    });
</script>